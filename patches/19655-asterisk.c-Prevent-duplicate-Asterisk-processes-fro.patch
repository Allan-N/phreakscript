From 6a35b12e045da797ff030c85c1692b5585710d37 Mon Sep 17 00:00:00 2001
From: Naveen Albert <asterisk@phreaknet.org>
Date: Sun, 4 Dec 2022 14:58:35 +0000
Subject: [PATCH] asterisk.c: Prevent duplicate Asterisk processes from
 starting.

During startup, there is a period of time between when the daemon
is started and when Asterisk starts accepting socket connections
for remote consoles, during which if another attempt is made to
start the Asterisk daemon, it will succeed. This will lead to
multiple Asterisk processes running concurrently, causing all
sorts of issues.

A check is now added before starting the daemon to check if
if the PID in the PID file is currently running, and if so,
to abort to avoid starting a duplicate Asterisk process.

ASTERISK-30339 #close

Change-Id: I38d8d75567524ffd6b1779aa24e7f2bd6951fbb3
---
 main/asterisk.c | 35 +++++++++++++++++++++++++++++++++++
 1 file changed, 35 insertions(+)

diff --git a/main/asterisk.c b/main/asterisk.c
index dea849f10c..21da28c1fb 100644
--- a/main/asterisk.c
+++ b/main/asterisk.c
@@ -1696,6 +1696,35 @@ static int ast_tryconnect(void)
 		return 1;
 }
 
+static int ast_is_starting(void)
+{
+	/* Don't use kill since that only works if Asterisk was started as the same user. */
+	struct stat st;
+	FILE *f;
+	long file_pid = 0;
+	char procpath[PATH_MAX];
+
+	/* Get current value from PID file */
+	f = fopen(ast_config_AST_PID, "r");
+	if (!f) {
+		return 0; /* PID file doesn't exist? No way to tell. */
+	}
+	fscanf(f, "%ld", &file_pid);
+	fclose(f);
+	if (!file_pid) {
+		return 0;
+	}
+
+	/* Check if such a process is running */
+	snprintf(procpath, sizeof(procpath), "/proc/%ld", file_pid);
+	if (stat(procpath, &st) == -1 && errno == ENOENT) {
+		/* Process doesn't exist */
+		return 0;
+	}
+	return 1;
+}
+
+
 /*! \brief Urgent handler
  *
  * Called by soft_hangup to interrupt the poll, read, or other
@@ -4021,6 +4050,12 @@ int main(int argc, char *argv[])
 		exit(1);
 	}
 
+	if (ast_is_starting()) {
+		fprintf(stderr, "Asterisk is currently starting.  Use 'asterisk -r' to connect momentarily.\n");
+		printf("%s", term_quit());
+		exit(1);
+	}
+
 #ifdef HAVE_CAP
 	child_cap = cap_from_text("cap_net_admin-eip");
 #endif
-- 
2.30.2


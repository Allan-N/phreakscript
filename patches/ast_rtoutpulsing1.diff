diff --git a/channels/chan_dahdi.c b/channels/chan_dahdi.c
index e6c41e51e9..3baabb0872 100644
--- a/channels/chan_dahdi.c
+++ b/channels/chan_dahdi.c
@@ -2573,6 +2573,12 @@ static enum analog_event dahdievent_to_analogevent(int event)
 	case DAHDI_EVENT_PULSE_START:
 		res = ANALOG_EVENT_PULSE_START;
 		break;
+	case DAHDI_EVENT_PULSE:
+		res = ANALOG_EVENT_PULSE;
+		break;
+	case DAHDI_EVENT_PULSE_BREAK:
+		res = ANALOG_EVENT_PULSE_BREAK;
+		break;
 	case DAHDI_EVENT_POLARITY:
 		res = ANALOG_EVENT_POLARITY;
 		break;
@@ -7778,6 +7784,10 @@ static struct ast_frame *dahdi_handle_event(struct ast_channel *ast)
 		if (!ast_channel_pbx(ast))
 			tone_zone_play_tone(p->subs[idx].dfd, -1);
 		break;
+	case DAHDI_EVENT_PULSE:
+	case DAHDI_EVENT_PULSE_BREAK:
+		/* handled in sig_analog */
+		break;
 	case DAHDI_EVENT_DIALCOMPLETE:
 		/* DAHDI has completed dialing all digits sent using DAHDI_DIAL. */
 #if defined(HAVE_PRI)
diff --git a/channels/chan_dahdi.h b/channels/chan_dahdi.h
index b7955cdddf..23d0691f24 100644
--- a/channels/chan_dahdi.h
+++ b/channels/chan_dahdi.h
@@ -354,6 +354,11 @@ struct dahdi_pvt {
 	unsigned int pulse:1;
 	/*! \brief TRUE if a pulsed digit was detected. (Pulse dial phone detected) */
 	unsigned int pulsedial:1;
+	/*!
+	 * \brief TRUE if we will support real time dial pulsing.
+	 * \note Set from the "realtimepulsing" value read in from chan_dahdi.conf
+	 */
+	unsigned int realtimepulsing:1;
 	unsigned int restartpending:1;		/*!< flag to ensure counted only once for restart */
 	/*!
 	 * \brief TRUE if caller ID is restricted.
diff --git a/channels/chan_iax2.c b/channels/chan_iax2.c
index cbf4ab4479..e72917d126 100644
--- a/channels/chan_iax2.c
+++ b/channels/chan_iax2.c
@@ -1438,6 +1438,7 @@ static int iax2_is_control_frame_allowed(int subtype)
 	case AST_CONTROL_TAKEOFFHOOK:
 	case AST_CONTROL_OFFHOOK:
 	case AST_CONTROL_CONGESTION:
+	case AST_CONTROL_PULSE:
 	case AST_CONTROL_FLASH:
 	case AST_CONTROL_WINK:
 	case AST_CONTROL_OPTION:
diff --git a/channels/sig_analog.c b/channels/sig_analog.c
index 7ebb06239f..1cd63365c6 100644
--- a/channels/sig_analog.c
+++ b/channels/sig_analog.c
@@ -290,6 +290,12 @@ static char *analog_event2str(enum analog_event event)
 	case ANALOG_EVENT_PULSE_START:
 		res = "ANALOG_EVENT_PULSE_START";
 		break;
+	case ANALOG_EVENT_PULSE:
+		res = "ANALOG_EVENT_PULSE";
+		break;
+	case ANALOG_EVENT_PULSE_BREAK:
+		res = "ANALOG_EVENT_PULSE_BREAK";
+		break;
 	case ANALOG_EVENT_POLARITY:
 		res = "ANALOG_EVENT_POLARITY";
 		break;
@@ -2874,10 +2880,30 @@ static struct ast_frame *__analog_handle_event(struct analog_pvt *p, struct ast_
 		break;
 #endif
 	case ANALOG_EVENT_PULSE_START:
+		p->pulsemakecount = p->pulsebreakcount = 0;
 		/* Stop tone if there's a pulse start and the PBX isn't started */
 		if (!ast_channel_pbx(ast))
 			analog_play_tone(p, ANALOG_SUB_REAL, -1);
 		break;
+	case ANALOG_EVENT_PULSE:
+		if (p->realtimepulsing) {
+			ast_queue_control(p->subs[ANALOG_SUB_REAL].owner, AST_CONTROL_PULSE);
+			if (p->pulsemakecount < 9) {
+				struct timespec now = ast_tsnow();
+				p->pulsemakes[p->pulsemakecount] = now.tv_sec * 1000 + now.tv_nsec / 1000000;
+				p->pulsemakecount++;
+			}
+		}
+		break;
+	case ANALOG_EVENT_PULSE_BREAK:
+		if (p->realtimepulsing) {
+			if (p->pulsebreakcount < 9) {
+				struct timespec now = ast_tsnow();
+				p->pulsebreaks[p->pulsebreakcount] = now.tv_sec * 1000 + now.tv_nsec / 1000000;
+				p->pulsebreakcount++;
+			}
+		}
+		break;
 	case ANALOG_EVENT_DIALCOMPLETE:
 		if (p->inalarm) {
 			break;
diff --git a/channels/sig_analog.h b/channels/sig_analog.h
index 81043f39a5..02b1a4de17 100644
--- a/channels/sig_analog.h
+++ b/channels/sig_analog.h
@@ -88,6 +88,8 @@ enum analog_event {
 	ANALOG_EVENT_RINGEROFF,
 	ANALOG_EVENT_HOOKCOMPLETE,
 	ANALOG_EVENT_PULSE_START,
+	ANALOG_EVENT_PULSE,
+	ANALOG_EVENT_PULSE_BREAK,
 	ANALOG_EVENT_POLARITY,
 	ANALOG_EVENT_RINGBEGIN,
 	ANALOG_EVENT_EC_DISABLED,
@@ -280,6 +282,13 @@ struct analog_pvt {
 	struct analog_dialoperation dop;
 	int onhooktime;							/*< Time the interface went on-hook. */
 	int fxsoffhookstate;					/*< TRUE if the FXS port is off-hook */
+
+	/* Used for real time dial pulsing support */
+	int pulsemakecount;
+	int pulsebreakcount;
+	int pulsemakes[9];
+	int pulsebreaks[9];
+
 	/*! \brief -1 = unknown, 0 = no messages, 1 = new messages available */
 	int msgstate;
 
@@ -300,6 +309,7 @@ struct analog_pvt {
 	unsigned int permcallwaiting:1;			/*!< TRUE if call waiting is enabled. (Configured option) */
 	unsigned int permhidecallerid:1;		/*!< Whether to hide our outgoing caller ID or not */
 	unsigned int pulse:1;
+	unsigned int realtimepulsing:1;
 	unsigned int threewaycalling:1;
 	unsigned int threewaysilenthold:1;		/*!< Whether to time out a three-way dial tone to silence */
 	unsigned int transfer:1;
diff --git a/funcs/func_frame_drop.c b/funcs/func_frame_drop.c
index 522685cbd0..ee2c8781d3 100644
--- a/funcs/func_frame_drop.c
+++ b/funcs/func_frame_drop.c
@@ -77,6 +77,7 @@
 					<enum name = "TAKEOFFHOOK" />
 					<enum name = "OFFHOOK" />
 					<enum name = "CONGESTION" />
+					<enum name = "PULSE" />
 					<enum name = "FLASH" />
 					<enum name = "WINK" />
 					<enum name = "PROGRESS" />
@@ -134,6 +135,7 @@ static struct {
 	{ AST_CONTROL_TAKEOFFHOOK,   ",TAKEOFFHOOK," },
 	{ AST_CONTROL_OFFHOOK,   ",OFFHOOK," },
 	{ AST_CONTROL_CONGESTION,   ",CONGESTION," },
+	{ AST_CONTROL_PULSE,  ",PULSE," },
 	{ AST_CONTROL_FLASH,   ",FLASH," },
 	{ AST_CONTROL_WINK,   ",WINK," },
 	{ AST_CONTROL_PROGRESS,   ",PROGRESS," },
diff --git a/funcs/func_frame_trace.c b/funcs/func_frame_trace.c
index 67345ef9e1..97ef1f7516 100644
--- a/funcs/func_frame_trace.c
+++ b/funcs/func_frame_trace.c
@@ -266,6 +266,9 @@ static void print_frame(struct ast_frame *frame)
 		case AST_CONTROL_CONGESTION:
 			ast_verbose("SubClass: CONGESTION\n");
 			break;
+		case AST_CONTROL_PULSE:
+			ast_verbose("SubClass: PULSE\n");
+			break;
 		case AST_CONTROL_FLASH:
 			ast_verbose("SubClass: FLASH\n");
 			break;
diff --git a/include/asterisk/frame.h b/include/asterisk/frame.h
index 78e369c642..41f328c7ca 100644
--- a/include/asterisk/frame.h
+++ b/include/asterisk/frame.h
@@ -312,6 +312,7 @@ enum ast_control_frame_type {
 	AST_CONTROL_STREAM_TOPOLOGY_REQUEST_CHANGE = 35,    /*!< Channel indication that a stream topology change has been requested */
 	AST_CONTROL_STREAM_TOPOLOGY_CHANGED = 36,           /*!< Channel indication that a stream topology change has occurred */
 	AST_CONTROL_STREAM_TOPOLOGY_SOURCE_CHANGED = 37,    /*!< Channel indication that one of the source streams has changed its source */
+	AST_CONTROL_PULSE = 38,			/*!< Dial Pulse */
 
 	/*
 	 * WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING
diff --git a/main/channel.c b/main/channel.c
index 122f6e55a3..a98e635d95 100644
--- a/main/channel.c
+++ b/main/channel.c
@@ -3321,6 +3321,7 @@ int ast_waitfordigit_full(struct ast_channel *c, int timeout_ms, const char *bre
 				case AST_CONTROL_HOLD:
 				case AST_CONTROL_UNHOLD:
 				case AST_CONTROL_FLASH:
+				case AST_CONTROL_PULSE:
 				case -1:
 					/* Unimportant */
 					break;
@@ -4294,6 +4295,7 @@ static int attribute_const is_visible_indication(enum ast_control_frame_type con
 	case AST_CONTROL_OPTION:
 	case AST_CONTROL_WINK:
 	case AST_CONTROL_FLASH:
+	case AST_CONTROL_PULSE:
 	case AST_CONTROL_OFFHOOK:
 	case AST_CONTROL_TAKEOFFHOOK:
 	case AST_CONTROL_ANSWER:
@@ -4595,6 +4597,7 @@ static int indicate_data_internal(struct ast_channel *chan, int _condition, cons
 	case AST_CONTROL_OPTION:
 	case AST_CONTROL_WINK:
 	case AST_CONTROL_FLASH:
+	case AST_CONTROL_PULSE:
 	case AST_CONTROL_OFFHOOK:
 	case AST_CONTROL_TAKEOFFHOOK:
 	case AST_CONTROL_ANSWER:
diff --git a/main/frame.c b/main/frame.c
index 711f9e15f1..2a80921c24 100644
--- a/main/frame.c
+++ b/main/frame.c
@@ -444,6 +444,9 @@ char *ast_frame_subclass2str(struct ast_frame *f, char *subclass, size_t slen, c
 		case AST_CONTROL_CONGESTION:
 			ast_copy_string(subclass, "Congestion", slen);
 			break;
+		case AST_CONTROL_PULSE:
+			ast_copy_string(subclass, "Pulse", slen);
+			break;
 		case AST_CONTROL_FLASH:
 			ast_copy_string(subclass, "Flash", slen);
 			break;
